// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/selection_sort.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class SelectionSortBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SelectionSortBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SelectionSortBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// Lấy tổng số bước
  int getTotalSteps() {
    return _getTotalSteps();
  }

  late final _getTotalStepsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getTotalSteps');
  late final _getTotalSteps = _getTotalStepsPtr.asFunction<int Function()>();

  /// Hàm khởi động thuật toán Selection Sort
  /// @param arr: Mảng cần sắp xếp
  /// @param length: Độ dài mảng
  void startSelectionSort(ffi.Pointer<ffi.Int32> arr, int length) {
    return _startSelectionSort(arr, length);
  }

  late final _startSelectionSortPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>, ffi.Int32)>
  >('startSelectionSort');
  late final _startSelectionSort =
      _startSelectionSortPtr
          .asFunction<void Function(ffi.Pointer<ffi.Int32>, int)>();

  /// Lấy một bước trong quá trình sắp xếp
  /// @param index: Chỉ số bước cần lấy
  /// @return Con trỏ đến cấu trúc SortStep tương ứng
  SortStep getStep(int index) {
    return _getStep(index);
  }

  late final _getStepPtr =
      _lookup<ffi.NativeFunction<SortStep Function(ffi.Int32)>>('getStep');
  late final _getStep = _getStepPtr.asFunction<SortStep Function(int)>();
}

final class SortStep extends ffi.Struct {
  @ffi.Array.multi([100])
  external ffi.Array<ffi.Int32> values;

  @ffi.Array.multi([100])
  external ffi.Array<ffi.Int32> colors;

  @ffi.Int32()
  external int length;
}

const int MAX_STEPS = 1000;

const int MAX_LENGTH = 100;

const int DEFAULT_COLOR = 0;

const int CURRENT_COLOR = 1;

const int MIN_COLOR = 2;

const int SWAP_COLOR = 3;

const int SORTED_COLOR = 4;
