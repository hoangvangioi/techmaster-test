// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/eight_queens.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class EightQueensBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  EightQueensBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  EightQueensBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// Hàm kiểm tra xem có thể đặt quân hậu ở vị trí (row, col) hay không
  int isSafe(ffi.Pointer<ffi.Pointer<ffi.Int>> board, int row, int col) {
    return _isSafe(board, row, col);
  }

  late final _isSafePtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Int>>, ffi.Int, ffi.Int)
    >
  >('isSafe');
  late final _isSafe =
      _isSafePtr
          .asFunction<
            int Function(ffi.Pointer<ffi.Pointer<ffi.Int>>, int, int)
          >();

  /// Hàm lưu giải pháp vào mảng solutions
  void saveSolution(ffi.Pointer<ffi.Pointer<ffi.Int>> board) {
    return _saveSolution(board);
  }

  late final _saveSolutionPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Int>>)>
  >('saveSolution');
  late final _saveSolution =
      _saveSolutionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Int>>)>();

  /// Hàm quay lui để tìm tất cả các cách sắp xếp 8 quân hậu
  int solveNQUtil(ffi.Pointer<ffi.Pointer<ffi.Int>> board, int row) {
    return _solveNQUtil(board, row);
  }

  late final _solveNQUtilPtr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Int>>, ffi.Int)
    >
  >('solveNQUtil');
  late final _solveNQUtil =
      _solveNQUtilPtr
          .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Int>>, int)>();

  /// Hàm giải bài toán 8 quân hậu và trả về các giải pháp
  void solveNQ() {
    return _solveNQ();
  }

  late final _solveNQPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>(
    'solveNQ',
  );
  late final _solveNQ = _solveNQPtr.asFunction<void Function()>();

  /// Hàm trả về các giải pháp dưới dạng mảng
  ffi.Pointer<ffi.Int> getSolutions() {
    return _getSolutions();
  }

  late final _getSolutionsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
        'getSolutions',
      );
  late final _getSolutions =
      _getSolutionsPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();
}

const int N = 8;
